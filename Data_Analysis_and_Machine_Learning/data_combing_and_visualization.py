# -*- coding: utf-8 -*-
"""Data_Combing_and_Visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bVVRIAy1CUYCf6H2EkhQvxsVwjtJXD-r
"""

import os
import pandas as pd
import numpy as np
import seaborn as sns 
import scipy as sp
import matplotlib.pyplot as plt
from matplotlib import rcParams
from scipy.stats import sem
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix

from google.colab import drive
drive.mount('/content/drive')

# This table has the desciption and name of all the data files
Index = pd.read_csv('/content/drive/My Drive/HNC/Data/Index_Sheet.csv')
Index.head(30)

# Code for creating the master table
sheets = Index.loc[:,'Parameter name']
master = pd.read_csv('/content/drive/My Drive/HNC/Data/Master_sheet.csv', index_col = "patient_num")
patients = pd.read_csv('/content/drive/My Drive/HNC/Data/Patient_sheet.csv', index_col = "patient_num")
count =0
x=0
for sheet in sheets:
  table = pd.read_csv(f'/content/drive/My Drive/HNC/Data/{sheet}.csv', index_col = "patient_num")
  if sheet == 'treatment-info':
    table.drop(table.iloc[:,12:], axis=1, inplace=True)
  for num in patients.index:
    if num in table.index:
      if num in master.index:
        for col in table.columns:
          master.at[num,col] = table.at[num,col]
      else:
        row = table.loc[table.index == num]
        master = pd.concat((master,row),axis=0)
master.head(70)



cols = master.columns.tolist()
list(enumerate(cols))

master.to_csv("Master_file")

# Normalized Y-axis

R = master[master['replanned_or_not']=='R']
NR = master[master['replanned_or_not']=='NR']
plt.figure(figsize = (50,70))
print(Index.iloc[2,0]+": "+Index.iloc[2,1])
for i in enumerate(cols[4:31]):
  if R[i[1]].dtype == 'object':
    continue
  data = pd.concat([R[i[1]].dropna(), NR[i[1]].dropna()])
  data_min, data_max = min(data), max(data)
  xlim = (data_min, data_max)
  width = (data_max - data_min)/15
  bins = np.arange(xlim[0],xlim[-1]+width,float(width))
  plt.subplot(((len(cols[4:31])/3)+1),3,i[0]+1)
  plt.hist(R[i[1]].dropna() , color='red', bins =bins, label='R', alpha=0.5, density=True)
  plt.hist(NR[i[1]].dropna() , color='green', bins =bins, label='NR', alpha=0.5, density=True)
  plt.title(f"{i[1]}")
  plt.axvline(R[i[1]].mean(),color="red",label = 'Mean (R)')
  plt.axvline(NR[i[1]].mean(),color="green",label = 'Mean (NR)')
  plt.ylabel("Count")
  plt.legend()

R = master[master['replanned_or_not']=='R']
NR = master[master['replanned_or_not']=='NR']
plt.figure(figsize = (50,70))
print(Index.iloc[3,0]+": "+Index.iloc[3,1])
for i in enumerate(cols[31:57]):
  if R[i[1]].dtype == 'object':
    continue
  data = pd.concat([R[i[1]].dropna(), NR[i[1]].dropna()])
  data_min, data_max = min(data), max(data)
  xlim = (data_min, data_max)
  width = (data_max - data_min)/15
  bins = np.arange(xlim[0],xlim[-1]+width,float(width))
  plt.subplot(((len(cols[31:57])/3)+1),3,i[0]+1)
  plt.hist(R[i[1]].dropna() , color='red', bins =bins, label='R', alpha=0.5, density=True)
  plt.hist(NR[i[1]].dropna() , color='green', bins =bins, label='NR', alpha=0.5, density=True)
  plt.title(f"{i[1]}")
  plt.axvline(R[i[1]].mean(),color="red",label = 'Mean (R)')
  plt.axvline(NR[i[1]].mean(),color="green",label = 'Mean (NR)')
  plt.ylabel("Count")
  plt.legend()

R = master[master['replanned_or_not']=='R']
NR = master[master['replanned_or_not']=='NR']
plt.figure(figsize = (20,10))
print(Index.iloc[4,0]+": "+Index.iloc[4,1])
for i in enumerate(cols[57:63]):
  if R[i[1]].dtype == 'object':
    continue
  data = pd.concat([R[i[1]].dropna(), NR[i[1]].dropna()])
  data_min, data_max = min(data), max(data)
  xlim = (data_min, data_max)
  width = (data_max - data_min)/20
  bins = np.arange(xlim[0],xlim[-1]+width,float(width))
  plt.subplot(((len(cols[57:63])/3)+1),3,i[0]+1)
  plt.hist(R[i[1]].dropna() , color='red', bins =bins, label='R', alpha=0.5, density=True)
  plt.hist(NR[i[1]].dropna() , color='green', bins =bins, label='NR', alpha=0.5, density=True)
  plt.title(f"{i[1]}")
  plt.axvline(R[i[1]].mean(),color="red",label = 'Mean (R)')
  plt.axvline(NR[i[1]].mean(),color="green",label = 'Mean (NR)')
  plt.ylabel("Count")
  plt.legend()

R = master[master['replanned_or_not']=='R']
NR = master[master['replanned_or_not']=='NR']
plt.figure(figsize = (20,10))
print(Index.iloc[5,0]+": "+Index.iloc[5,1])
for i in enumerate(cols[63:68]):
  if R[i[1]].dtype == 'object':
    continue
  data = pd.concat([R[i[1]].dropna(), NR[i[1]].dropna()])
  data_min, data_max = min(data), max(data)
  xlim = (data_min, data_max)
  width = (data_max - data_min)/20
  bins = np.arange(xlim[0],xlim[-1]+width,float(width))
  plt.subplot(((len(cols[63:68])/3)+1),3,i[0]+1)
  plt.hist(R[i[1]].dropna() , color='red', bins =bins, label='R', alpha=0.5, density=True)
  plt.hist(NR[i[1]].dropna() , color='green', bins =bins, label='NR', alpha=0.5, density=True)
  plt.title(f"{i[1]}")
  plt.axvline(R[i[1]].mean(),color="red",label = 'Mean (R)')
  plt.axvline(NR[i[1]].mean(),color="green",label = 'Mean (NR)')
  plt.ylabel("Count")
  plt.legend()

R = master[master['replanned_or_not']=='R']
NR = master[master['replanned_or_not']=='NR']
plt.figure(figsize = (20,10))
print(Index.iloc[6,0]+": "+Index.iloc[6,1])
for i in enumerate(cols[68:73]):
  if R[i[1]].dtype == 'object':
    continue
  data = pd.concat([R[i[1]].dropna(), NR[i[1]].dropna()])
  data_min, data_max = min(data), max(data)
  xlim = (data_min, data_max)
  width = (data_max - data_min)/20
  bins = np.arange(xlim[0],xlim[-1]+width,float(width))
  plt.subplot(((len(cols[68:73])/3)+1),3,i[0]+1)
  plt.hist(R[i[1]].dropna() , color='red', bins =bins, label='R', alpha=0.5, density=True)
  plt.hist(NR[i[1]].dropna() , color='green', bins =bins, label='NR', alpha=0.5, density=True)
  plt.title(f"{i[1]}")
  plt.axvline(R[i[1]].mean(),color="red",label = 'Mean (R)')
  plt.axvline(NR[i[1]].mean(),color="green",label = 'Mean (NR)')
  plt.ylabel("Count")
  plt.legend()

R = master[master['replanned_or_not']=='R']
NR = master[master['replanned_or_not']=='NR']
plt.figure(figsize = (50,70))
print(Index.iloc[8,0]+": "+Index.iloc[8,1])
for i in enumerate(cols[73:99]):
  if R[i[1]].dtype == 'object':
    continue
  data = pd.concat([R[i[1]].dropna(), NR[i[1]].dropna()])
  data_min, data_max = min(data), max(data)
  xlim = (data_min, data_max)
  width = (data_max - data_min)/20
  bins = np.arange(xlim[0],xlim[-1]+width,float(width))
  plt.subplot(((len(cols[73:99])/3)+1),3,i[0]+1)
  plt.hist(R[i[1]].dropna() , color='red', bins =bins, label='R', alpha=0.5, density=True)
  plt.hist(NR[i[1]].dropna() , color='green', bins =bins, label='NR', alpha=0.5, density=True)
  plt.title(f"{i[1]}")
  plt.axvline(R[i[1]].mean(),color="red",label = 'Mean (R)')
  plt.axvline(NR[i[1]].mean(),color="green",label = 'Mean (NR)')
  plt.ylabel("Count")
  plt.legend()

R = master[master['replanned_or_not']=='R']
NR = master[master['replanned_or_not']=='NR']
plt.figure(figsize = (50,70))
print(Index.iloc[10,0]+": "+Index.iloc[10,1])
for i in enumerate(cols[99:125]):
  if R[i[1]].dtype == 'object':
    continue
  data = pd.concat([R[i[1]].dropna(), NR[i[1]].dropna()])
  data_min, data_max = min(data), max(data)
  xlim = (data_min, data_max)
  width = (data_max - data_min)/20
  bins = np.arange(xlim[0],xlim[-1]+width,float(width))
  plt.subplot(((len(cols[99:125])/3)+1),3,i[0]+1)
  plt.hist(R[i[1]].dropna() , color='red', bins =bins, label='R', alpha=0.5, density=True)
  plt.hist(NR[i[1]].dropna() , color='green', bins =bins, label='NR', alpha=0.5, density=True)
  plt.title(f"{i[1]}")
  plt.axvline(R[i[1]].mean(),color="red",label = 'Mean (R)')
  plt.axvline(NR[i[1]].mean(),color="green",label = 'Mean (NR)')
  plt.ylabel("Count")
  plt.legend()

R = master[master['replanned_or_not']=='R']
NR = master[master['replanned_or_not']=='NR']
plt.figure(figsize = (50,60))
print(Index.iloc[11,0]+": "+Index.iloc[11,1])
for i in enumerate(cols[125:152]):
  if R[i[1]].dtype == 'object':
    continue
  data = pd.concat([R[i[1]].dropna(), NR[i[1]].dropna()])
  data_min, data_max = min(data), max(data)
  xlim = (data_min, data_max)
  width = (data_max - data_min)/20
  bins = np.arange(xlim[0],xlim[-1]+width,float(width))
  plt.subplot(((len(cols[125:152])/3)+1),3,i[0]+1)
  plt.hist(R[i[1]].dropna() , color='red', bins =bins, label='R', alpha=0.5, density=True)
  plt.hist(NR[i[1]].dropna() , color='green', bins =bins, label='NR', alpha=0.5, density=True)
  plt.title(f"{i[1]}")
  plt.axvline(R[i[1]].mean(),color="red",label = 'Mean (R)')
  plt.axvline(NR[i[1]].mean(),color="green",label = 'Mean (NR)')
  plt.ylabel("Count")
  plt.legend()

R = master[master['replanned_or_not']=='R']
NR = master[master['replanned_or_not']=='NR']
plt.figure(figsize = (50,70))
print(Index.iloc[12,0]+": "+Index.iloc[12,1])
for i in enumerate(cols[152:177]):
  if R[i[1]].dtype == 'object':
    continue
  data = pd.concat([R[i[1]].dropna(), NR[i[1]].dropna()])
  data_min, data_max = min(data), max(data)
  xlim = (data_min, data_max)
  width = (data_max - data_min)/20
  bins = np.arange(xlim[0],xlim[-1]+width,float(width))
  plt.subplot(((len(cols[152:177])/3)+1),3,i[0]+1)
  plt.hist(R[i[1]].dropna() , color='red', bins =bins, label='R', alpha=0.5, density=True)
  plt.hist(NR[i[1]].dropna() , color='green', bins =bins, label='NR', alpha=0.5, density=True)
  plt.title(f"{i[1]}")
  plt.axvline(R[i[1]].mean(),color="red",label = 'Mean (R)')
  plt.axvline(NR[i[1]].mean(),color="green",label = 'Mean (NR)')
  plt.ylabel("Count")
  plt.legend()

R = master[master['replanned_or_not']=='R']
NR = master[master['replanned_or_not']=='NR']
plt.figure(figsize = (50,70))
print(Index.iloc[13,0]+": "+Index.iloc[13,1])
for i in enumerate(cols[177:204]):
  if R[i[1]].dtype == 'object':
    continue
  data = pd.concat([R[i[1]].dropna(), NR[i[1]].dropna()])
  data_min, data_max = min(data), max(data)
  xlim = (data_min, data_max)
  width = (data_max - data_min)/20
  bins = np.arange(xlim[0],xlim[-1]+width,float(width))
  plt.subplot(((len(cols[177:204])/3)+1),3,i[0]+1)
  plt.hist(R[i[1]].dropna() , color='red', bins =bins, label='R', alpha=0.5, density=True)
  plt.hist(NR[i[1]].dropna() , color='green', bins =bins, label='NR', alpha=0.5, density=True)
  plt.title(f"{i[1]}")
  plt.axvline(R[i[1]].mean(),color="red",label = 'Mean (R)')
  plt.axvline(NR[i[1]].mean(),color="green",label = 'Mean (NR)')
  plt.ylabel("Count")
  plt.legend()

R = master[master['replanned_or_not']=='R']
NR = master[master['replanned_or_not']=='NR']
plt.figure(figsize = (50,70))
print(Index.iloc[14,0]+": "+Index.iloc[14,1])
for i in enumerate(cols[204:229]):
  if R[i[1]].dtype == 'object':
    continue
  data = pd.concat([R[i[1]].dropna(), NR[i[1]].dropna()])
  data_min, data_max = min(data), max(data)
  xlim = (data_min, data_max)
  width = (data_max - data_min)/20
  bins = np.arange(xlim[0],xlim[-1]+width,float(width))
  plt.subplot(((len(cols[204:229])/3)+1),3,i[0]+1)
  plt.hist(R[i[1]].dropna() , color='red', bins =bins, label='R', alpha=0.5, density=True)
  plt.hist(NR[i[1]].dropna() , color='green', bins =bins, label='NR', alpha=0.5, density=True)
  plt.title(f"{i[1]}")
  plt.axvline(R[i[1]].mean(),color="red",label = 'Mean (R)')
  plt.axvline(NR[i[1]].mean(),color="green",label = 'Mean (NR)')
  plt.ylabel("Count")
  plt.legend()

R = master[master['replanned_or_not']=='R']
NR = master[master['replanned_or_not']=='NR']
plt.figure(figsize = (50,60))
print(Index.iloc[15,0]+": "+Index.iloc[15,1])
for i in enumerate(cols[229:256]):
  if R[i[1]].dtype == 'object':
    continue
  data = pd.concat([R[i[1]].dropna(), NR[i[1]].dropna()])
  data_min, data_max = min(data), max(data)
  xlim = (data_min, data_max)
  width = (data_max - data_min)/20
  bins = np.arange(xlim[0],xlim[-1]+width,float(width))
  plt.subplot(((len(cols[229:256])/3)+1),3,i[0]+1)
  plt.hist(R[i[1]].dropna() , color='red', bins =bins, label='R', alpha=0.5, density=True)
  plt.hist(NR[i[1]].dropna() , color='green', bins =bins, label='NR', alpha=0.5, density=True)
  plt.title(f"{i[1]}")
  plt.axvline(R[i[1]].mean(),color="red",label = 'Mean (R)')
  plt.axvline(NR[i[1]].mean(),color="green",label = 'Mean (NR)')
  plt.ylabel("Count")
  plt.legend()

R = master[master['replanned_or_not']=='R']
NR = master[master['replanned_or_not']=='NR']
plt.figure(figsize = (50,70))
print(Index.iloc[16,0]+": "+Index.iloc[16,1])
for i in enumerate(cols[256:281]):
  if R[i[1]].dtype == 'object':
    continue
  data = pd.concat([R[i[1]].dropna(), NR[i[1]].dropna()])
  data_min, data_max = min(data), max(data)
  xlim = (data_min, data_max)
  width = (data_max - data_min)/10
  bins = np.arange(xlim[0],xlim[-1]+width,float(width))
  plt.subplot(((len(cols[256:281])/3)+1),3,i[0]+1)
  plt.hist(R[i[1]].dropna() , color='red', bins =bins, label='R', alpha=0.5, density=True)
  plt.hist(NR[i[1]].dropna() , color='green', bins =bins, label='NR', alpha=0.5, density=True)
  plt.title(f"{i[1]}")
  plt.axvline(R[i[1]].mean(),color="red",label = 'Mean (R)')
  plt.axvline(NR[i[1]].mean(),color="green",label = 'Mean (NR)')
  plt.ylabel("Count")
  plt.legend()

R = master[master['replanned_or_not']=='R']
NR = master[master['replanned_or_not']=='NR']
plt.figure(figsize = (50,70))
print(Index.iloc[17,0]+": "+Index.iloc[17,1])
for i in enumerate(cols[281:308]):
  if R[i[1]].dtype == 'object':
    continue
  data = pd.concat([R[i[1]].dropna(), NR[i[1]].dropna()])
  data_min, data_max = min(data), max(data)
  xlim = (data_min, data_max)
  width = (data_max - data_min)/5
  bins = np.arange(xlim[0],xlim[-1]+width,float(width))
  plt.subplot(((len(cols[281:308])/3)+1),3,i[0]+1)
  plt.hist(R[i[1]].dropna() , color='red', bins =bins, label='R', alpha=0.5, density=True)
  plt.hist(NR[i[1]].dropna() , color='green', bins =bins, label='NR', alpha=0.5, density=True)
  plt.title(f"{i[1]}")
  plt.axvline(R[i[1]].mean(),color="red",label = 'Mean (R)')
  plt.axvline(NR[i[1]].mean(),color="green",label = 'Mean (NR)')
  plt.ylabel("Count")
  plt.legend()

R = master[master['replanned_or_not']=='R']
NR = master[master['replanned_or_not']=='NR']
plt.figure(figsize = (50,70))
print(Index.iloc[18,0]+": "+Index.iloc[18,1])
for i in enumerate(cols[308:333]):
  if R[i[1]].dtype == 'object':
    continue
  data = pd.concat([R[i[1]].dropna(), NR[i[1]].dropna()])
  data_min, data_max = min(data), max(data)
  xlim = (data_min, data_max)
  width = (data_max - data_min)/5
  bins = np.arange(xlim[0],xlim[-1]+width,float(width))
  plt.subplot(((len(cols[308:333])/3)+1),3,i[0]+1)
  plt.hist(R[i[1]].dropna() , color='red', bins =bins, label='R', alpha=0.5, density=True)
  plt.hist(NR[i[1]].dropna() , color='green', bins =bins, label='NR', alpha=0.5, density=True)
  plt.title(f"{i[1]}")
  plt.axvline(R[i[1]].mean(),color="red",label = 'Mean (R)')
  plt.axvline(NR[i[1]].mean(),color="green",label = 'Mean (NR)')
  plt.ylabel("Count")
  plt.legend()

R = master[master['replanned_or_not']=='R']
NR = master[master['replanned_or_not']=='NR']
plt.figure(figsize = (20,5))
for i in enumerate(cols[334:335]):
  if R[i[1]].dtype == 'object':
    continue
  data = pd.concat([R[i[1]].dropna(), NR[i[1]].dropna()])
  data_min, data_max = min(data), max(data)
  xlim = (data_min, data_max)
  width = (data_max - data_min)/20
  bins = np.arange(xlim[0],xlim[-1]+width,float(width))
  plt.subplot(((len(cols[334:335])/3)+1),3,i[0]+1)
  plt.hist(R[i[1]].dropna() , color='red', bins =bins, label='R', alpha=0.5, density=True)
  plt.hist(NR[i[1]].dropna() , color='green', bins =bins, label='NR', alpha=0.5, density=True)
  plt.title(f"{i[1]}")
  plt.axvline(R[i[1]].mean(),color="red",label = 'Mean (R)')
  plt.axvline(NR[i[1]].mean(),color="green",label = 'Mean (NR)')
  plt.ylabel("Count")
  plt.legend()

R = master[master['replanned_or_not']=='R']
NR = master[master['replanned_or_not']=='NR']
plt.figure(figsize = (50,70))
print(Index.iloc[21,0]+": "+Index.iloc[21,1])
for i in enumerate(cols[349:385]):
  if R[i[1]].dtype == 'object':
    continue
  data = pd.concat([R[i[1]].dropna(), NR[i[1]].dropna()])
  data_min, data_max = min(data), max(data)
  xlim = (data_min, data_max)
  width = (data_max - data_min)/10
  bins = np.arange(xlim[0],xlim[-1]+width,float(width))
  plt.subplot(((len(cols[349:385])/3)+1),3,i[0]+1)
  plt.hist(R[i[1]].dropna() , color='red', bins =bins, label='R', alpha=0.5, density=True)
  plt.hist(NR[i[1]].dropna() , color='green', bins =bins, label='NR', alpha=0.5, density=True)
  plt.title(f"{i[1]}")
  plt.axvline(R[i[1]].mean(),color="red",label = 'Mean (R)')
  plt.axvline(NR[i[1]].mean(),color="green",label = 'Mean (NR)')
  plt.ylabel("Count")
  plt.legend()

# List of columns having categorical data
obj_df = master.select_dtypes(include=['object']).copy()
obj_df.head()

# how to fill null values
#    --> Use most common category
#    ---> Drop the column
#    ---> bfill
#    ---> ffill
for col in obj_df.columns:
  print(col)
  print(obj_df[col].value_counts())
  print(master[master[col].isnull()].index.tolist())
  print(f'Sum of NAN: {obj_df[col].isna().sum()}')
print(obj_df.columns)

for col in master.columns:
  if master[col].isna().sum() > 0:
    print(f"{col} {master[col].dtype}: {master[col].isna().sum()}" )

# Filled NaN with median
master['age_start'].fillna(master['age_start'].median,inplace=True)
master['age_start'].isna().sum()

# Filled Nan with mode
print(master['cancer_category_id'].value_counts())
master['cancer_category_id'].fillna(master['cancer_category_id'].mode()[0],inplace=True)
print(master['cancer_category_id'].isna().sum())

# Filled Nan with median
print(master['num_chemo'].value_counts())
master['num_chemo'].fillna(master['num_chemo'].median,inplace=True)
print(master['num_chemo'].isna().sum())

# Filled NaN with median
master['first_weight_kg'].fillna(master['first_weight_kg'].median,inplace=True)
master['first_weight_kg'].isna().sum()

# Filled NaN with median
master['total_weight-loss_kg'].fillna(master['total_weight-loss_kg'].median,inplace=True)
master['total_weight-loss_kg'].isna().sum()

# Filled NaN with median
master['weight_norm_fx-0'].fillna(master['weight_norm_fx-0'].median,inplace=True)
master['weight_norm_fx-0'].isna().sum()

# filling categorical variables with mode
for col in master.columns:
  if master[col].isna().sum() > 0:
    print(f"{col} {master[col].dtype}: {master[col].isna().sum()}" )
    master[col].fillna(master[col].mode()[0],inplace=True)
    print(f"{col} {master[col].dtype}: {master[col].isna().sum()}" )

cols = master.columns.tolist()
len(cols)

# Label Encoding for R and NR and deleting excess columsn
master["replanned_or_not"] = master["replanned_or_not"].astype('category')
master["replanned_or_not"] = master["replanned_or_not"].cat.codes
result = pd.DataFrame()
result['replanned_or_not'] = master.iloc[:,0]
master.shape
result

#Label encoding all the object columns
for col in obj_df:
  master[col] = master[col].astype('category')
  master[col] = master[col].cat.codes
master.head()

# Correlation Heatmap
corr = master.corr()
fig, ax = plt.subplots(figsize=(30,10))
sns.heatmap(corr,ax=ax)
corr.shape

#columns = np.full((corr.shape[0],), True, dtype=bool)
#for i in range(corr.shape[0]):
 #   for j in range(i+1, corr.shape[0]):
  #      if corr.iloc[i,j] >= 0.9:
  #          if columns[j]:
   #             columns[j] = False
#corr

## When selecting using correlation
#selected_columns = master.columns[columns]
#print(selected_columns.shape)
#selected_columns

